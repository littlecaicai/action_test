# This workflow will build a golang project
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-go

name: Go

on:
  push:
    branches:
    - main
    - master

jobs:

  build:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3

    - name: Set up Go
      uses: actions/setup-go@v3
      with:
        go-version: 1.19

    - name: Build
      run: go build -o main ./main.go

    - name: Test
      run: go test -v ./...
      
    - name: Tar
      run: tar czvf main.tar.gz ./*
      
    - run: mkdir -p artifact
      
    - uses: actions/upload-artifact@v3
      with:
        name: action_test
        path: main.tar.gz
      
  deploy_pc:
    needs: build
    runs-on: ubuntu-latest
    environment: tx
    steps:
    - uses: actions/download-artifact@v3
      id: download_pc
      with:
        name: action_test
        path: artifact_download
    - name: Display structure of downloaded files
      run: ls -R
   
    - name: ssh deploy
    # You may pin to the exact commit or the version.
      uses: easingthemes/ssh-deploy@main
      env:
        # Private key part of an SSH key pair
        SSH_PRIVATE_KEY: ${{ secrets.SSH_PRIVATE_KEY }}
        # Remote host
        REMOTE_HOST: ${{ secrets.REMOTE_HOST }}
        # Remote user
        REMOTE_USER: work
        # Remote port
        REMOTE_PORT: 22
        # Source directory, path relative to `$GITHUB_WORKSPACE` root, eg: `dist/`
        SOURCE: artifact_download/main.tar.gz
        # Target directory
        TARGET: /home/work/action_deploy
        # Arguments to pass to rsync
        ARGS: -rlgoDzvc -i 
        # An array of ssh arguments, they must be prefixed with -o and separated by a comma, for example: -o SomeArgument=no, -o SomeOtherArgument=5 
        SSH_CMD_ARGS:  -o StrictHostKeyChecking=no
        SCRIPT_BEFORE: |
          whoami
          ls -al
          rm -rf action_deploy/*
        SCRIPT_AFTER: |
          cd action_deploy
          tar xzvf main.tar.gz
          ls -al
          echo $RSYNC_STDOUT
          
  deploy_mobile:
    needs: build
    runs-on: ubuntu-latest
    environment: tx_mobile
    steps:
    - uses: actions/download-artifact@v3
      id: download
      with:
        name: action_test
        path: artifact_download
    - name: Display structure of downloaded files
      run: ls -R
   
    - name: ssh deploy
      id: deploy
    # You may pin to the exact commit or the version.
      uses: easingthemes/ssh-deploy@main
      env:
        # Private key part of an SSH key pair
        SSH_PRIVATE_KEY: ${{ secrets.SSH_PRIVATE_KEY }}
        # Remote host
        REMOTE_HOST: ${{ secrets.REMOTE_HOST }}
        # Remote user
        REMOTE_USER: work
        # Remote port
        REMOTE_PORT: 22
        # Source directory, path relative to `$GITHUB_WORKSPACE` root, eg: `dist/`
        SOURCE: artifact_download/main.tar.gz
        # Target directory
        TARGET: /home/work/action_deploy
        # Arguments to pass to rsync
        ARGS: -rlgoDzvc -i 
        # An array of ssh arguments, they must be prefixed with -o and separated by a comma, for example: -o SomeArgument=no, -o SomeOtherArgument=5 
        SSH_CMD_ARGS:  -o StrictHostKeyChecking=no
        SCRIPT_BEFORE: |
          whoami
          ls -al
          rm -rf action_deploy/*
        SCRIPT_AFTER: |
          cd action_deploy
          tar xzvf main.tar.gz
          ls -al
          echo $RSYNC_STDOUT
          
  echo:
    runs-on: ubuntu-latest
    steps:
    - name: echo
      run: |
        echo "finish success"
        echo job.status 
        echo steps.<download_pc>.conclusion 
        echo steps.<deploy>.conclusion
        #publish_message:
        #  runs-on: ubuntu-latest
        #  steps:
        #  - name: publish
        #    run: |
        #      curl 'https://qyapi.weixin.qq.com/cgi-bin/webhook/send?key=0e19a011-3602-48f4-b20f-0f6b89c2f51a' \
        #      -H 'Content-Type: application/json' \
        #      -d '{
        #        "msgtype": "markdown",
        #        "markdown": {
        #          "content": "机器人测试<font color=\"warning\">${{ job.status }}</font>\n
        #          >download_pc:<font color=\"comment\">${{ steps.<download_pc>.conclusion }}</font>
        #          >download:<font color=\"comment\">${{steps.<download>.conclusion}}</font>
        #          >deploy:<font color=\"comment\">${{steps.<deploy>.conclusion}}</font>"
        #        }
        #      }'
